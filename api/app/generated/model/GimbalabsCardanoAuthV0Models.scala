/**
 * Generated by API Builder - https://www.apibuilder.io
 * Service version: 0.0.1-SNAPSHOT
 * apibuilder 0.15.33 app.apibuilder.io/gimbalabs/cardano-auth/latest/play_2_x_json
 */
package io.gimbalabs.cardano.auth.v0.models {

  /**
   * @param message The message to sign, in HEX format
   * @param signedMessage The signed message, in HEX format
   * @param signatureType The type of signature used, it can be payment, for wallet/delegation signature,
   *        vrf for SPOs
   * @param publicKey The public key used to sign the message, in HEX format
   */
  final case class Auth(
    message: String,
    signedMessage: String,
    signatureType: io.gimbalabs.cardano.auth.v0.models.SignatureType,
    publicKey: String
  )

  final case class AuthenticationToken(
    token: String
  )

  final case class GenericError(
    errorMessage: String
  )

  /**
   * Response for the healthcheck's endpoint of the service
   */
  final case class Healthcheck(
    status: String
  )

  final case class Message(
    message: String
  )

  final case class ProtectedEndpoint(
    message: Seq[String]
  )

  sealed trait SignatureType extends _root_.scala.Product with _root_.scala.Serializable

  object SignatureType {

    case object Payment extends SignatureType { override def toString = "payment" }
    case object Vrf extends SignatureType { override def toString = "vrf" }

    /**
     * UNDEFINED captures values that are sent either in error or
     * that were added by the server after this library was
     * generated. We want to make it easy and obvious for users of
     * this library to handle this case gracefully.
     *
     * We use all CAPS for the variable name to avoid collisions
     * with the camel cased values above.
     */
    final case class UNDEFINED(override val toString: String) extends SignatureType

    /**
     * all returns a list of all the valid, known values. We use
     * lower case to avoid collisions with the camel cased values
     * above.
     */
    val all: scala.List[SignatureType] = scala.List(Payment, Vrf)

    private[this]
    val byName: Map[String, SignatureType] = all.map(x => x.toString.toLowerCase -> x).toMap

    def apply(value: String): SignatureType = fromString(value).getOrElse(UNDEFINED(value))

    def fromString(value: String): _root_.scala.Option[SignatureType] = byName.get(value.toLowerCase)

  }

}

package io.gimbalabs.cardano.auth.v0.models {

  package object json {
    import play.api.libs.json.__
    import play.api.libs.json.JsString
    import play.api.libs.json.Writes
    import play.api.libs.functional.syntax._
    import io.gimbalabs.cardano.auth.v0.models.json._

    private[v0] implicit val jsonReadsUUID = __.read[String].map { str =>
      _root_.java.util.UUID.fromString(str)
    }

    private[v0] implicit val jsonWritesUUID = new Writes[_root_.java.util.UUID] {
      def writes(x: _root_.java.util.UUID) = JsString(x.toString)
    }

    private[v0] implicit val jsonReadsJodaDateTime = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(str)
    }

    private[v0] implicit val jsonWritesJodaDateTime = new Writes[_root_.org.joda.time.DateTime] {
      def writes(x: _root_.org.joda.time.DateTime) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(x))
      }
    }

    private[v0] implicit val jsonReadsJodaLocalDate = __.read[String].map { str =>
      _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(str)
    }

    private[v0] implicit val jsonWritesJodaLocalDate = new Writes[_root_.org.joda.time.LocalDate] {
      def writes(x: _root_.org.joda.time.LocalDate) = {
        JsString(_root_.org.joda.time.format.ISODateTimeFormat.date.print(x))
      }
    }

    implicit val jsonReadsCardanoAuthSignatureType = new play.api.libs.json.Reads[io.gimbalabs.cardano.auth.v0.models.SignatureType] {
      def reads(js: play.api.libs.json.JsValue): play.api.libs.json.JsResult[io.gimbalabs.cardano.auth.v0.models.SignatureType] = {
        js match {
          case v: play.api.libs.json.JsString => play.api.libs.json.JsSuccess(io.gimbalabs.cardano.auth.v0.models.SignatureType(v.value))
          case _ => {
            (js \ "value").validate[String] match {
              case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.gimbalabs.cardano.auth.v0.models.SignatureType(v))
              case err: play.api.libs.json.JsError =>
                (js \ "signature_type").validate[String] match {
                  case play.api.libs.json.JsSuccess(v, _) => play.api.libs.json.JsSuccess(io.gimbalabs.cardano.auth.v0.models.SignatureType(v))
                  case err: play.api.libs.json.JsError => err
                }
            }
          }
        }
      }
    }

    def jsonWritesCardanoAuthSignatureType(obj: io.gimbalabs.cardano.auth.v0.models.SignatureType) = {
      play.api.libs.json.JsString(obj.toString)
    }

    def jsObjectSignatureType(obj: io.gimbalabs.cardano.auth.v0.models.SignatureType) = {
      play.api.libs.json.Json.obj("value" -> play.api.libs.json.JsString(obj.toString))
    }

    implicit def jsonWritesCardanoAuthSignatureType: play.api.libs.json.Writes[SignatureType] = {
      new play.api.libs.json.Writes[io.gimbalabs.cardano.auth.v0.models.SignatureType] {
        def writes(obj: io.gimbalabs.cardano.auth.v0.models.SignatureType) = {
          jsonWritesCardanoAuthSignatureType(obj)
        }
      }
    }

    implicit def jsonReadsCardanoAuthAuth: play.api.libs.json.Reads[Auth] = {
      for {
        message <- (__ \ "message").read[String]
        signedMessage <- (__ \ "signed_message").read[String]
        signatureType <- (__ \ "signature_type").read[io.gimbalabs.cardano.auth.v0.models.SignatureType]
        publicKey <- (__ \ "public_key").read[String]
      } yield Auth(message, signedMessage, signatureType, publicKey)
    }

    def jsObjectAuth(obj: io.gimbalabs.cardano.auth.v0.models.Auth): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "message" -> play.api.libs.json.JsString(obj.message),
        "signed_message" -> play.api.libs.json.JsString(obj.signedMessage),
        "signature_type" -> play.api.libs.json.JsString(obj.signatureType.toString),
        "public_key" -> play.api.libs.json.JsString(obj.publicKey)
      )
    }

    implicit def jsonWritesCardanoAuthAuth: play.api.libs.json.Writes[Auth] = {
      new play.api.libs.json.Writes[io.gimbalabs.cardano.auth.v0.models.Auth] {
        def writes(obj: io.gimbalabs.cardano.auth.v0.models.Auth) = {
          jsObjectAuth(obj)
        }
      }
    }

    implicit def jsonReadsCardanoAuthAuthenticationToken: play.api.libs.json.Reads[AuthenticationToken] = {
      (__ \ "token").read[String].map { x => new AuthenticationToken(token = x) }
    }

    def jsObjectAuthenticationToken(obj: io.gimbalabs.cardano.auth.v0.models.AuthenticationToken): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "token" -> play.api.libs.json.JsString(obj.token)
      )
    }

    implicit def jsonWritesCardanoAuthAuthenticationToken: play.api.libs.json.Writes[AuthenticationToken] = {
      new play.api.libs.json.Writes[io.gimbalabs.cardano.auth.v0.models.AuthenticationToken] {
        def writes(obj: io.gimbalabs.cardano.auth.v0.models.AuthenticationToken) = {
          jsObjectAuthenticationToken(obj)
        }
      }
    }

    implicit def jsonReadsCardanoAuthGenericError: play.api.libs.json.Reads[GenericError] = {
      (__ \ "error_message").read[String].map { x => new GenericError(errorMessage = x) }
    }

    def jsObjectGenericError(obj: io.gimbalabs.cardano.auth.v0.models.GenericError): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "error_message" -> play.api.libs.json.JsString(obj.errorMessage)
      )
    }

    implicit def jsonWritesCardanoAuthGenericError: play.api.libs.json.Writes[GenericError] = {
      new play.api.libs.json.Writes[io.gimbalabs.cardano.auth.v0.models.GenericError] {
        def writes(obj: io.gimbalabs.cardano.auth.v0.models.GenericError) = {
          jsObjectGenericError(obj)
        }
      }
    }

    implicit def jsonReadsCardanoAuthHealthcheck: play.api.libs.json.Reads[Healthcheck] = {
      (__ \ "status").read[String].map { x => new Healthcheck(status = x) }
    }

    def jsObjectHealthcheck(obj: io.gimbalabs.cardano.auth.v0.models.Healthcheck): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "status" -> play.api.libs.json.JsString(obj.status)
      )
    }

    implicit def jsonWritesCardanoAuthHealthcheck: play.api.libs.json.Writes[Healthcheck] = {
      new play.api.libs.json.Writes[io.gimbalabs.cardano.auth.v0.models.Healthcheck] {
        def writes(obj: io.gimbalabs.cardano.auth.v0.models.Healthcheck) = {
          jsObjectHealthcheck(obj)
        }
      }
    }

    implicit def jsonReadsCardanoAuthMessage: play.api.libs.json.Reads[Message] = {
      (__ \ "message").read[String].map { x => new Message(message = x) }
    }

    def jsObjectMessage(obj: io.gimbalabs.cardano.auth.v0.models.Message): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "message" -> play.api.libs.json.JsString(obj.message)
      )
    }

    implicit def jsonWritesCardanoAuthMessage: play.api.libs.json.Writes[Message] = {
      new play.api.libs.json.Writes[io.gimbalabs.cardano.auth.v0.models.Message] {
        def writes(obj: io.gimbalabs.cardano.auth.v0.models.Message) = {
          jsObjectMessage(obj)
        }
      }
    }

    implicit def jsonReadsCardanoAuthProtectedEndpoint: play.api.libs.json.Reads[ProtectedEndpoint] = {
      (__ \ "message").read[Seq[String]].map { x => new ProtectedEndpoint(message = x) }
    }

    def jsObjectProtectedEndpoint(obj: io.gimbalabs.cardano.auth.v0.models.ProtectedEndpoint): play.api.libs.json.JsObject = {
      play.api.libs.json.Json.obj(
        "message" -> play.api.libs.json.Json.toJson(obj.message)
      )
    }

    implicit def jsonWritesCardanoAuthProtectedEndpoint: play.api.libs.json.Writes[ProtectedEndpoint] = {
      new play.api.libs.json.Writes[io.gimbalabs.cardano.auth.v0.models.ProtectedEndpoint] {
        def writes(obj: io.gimbalabs.cardano.auth.v0.models.ProtectedEndpoint) = {
          jsObjectProtectedEndpoint(obj)
        }
      }
    }
  }
}

package io.gimbalabs.cardano.auth.v0 {

  object Bindables {

    import play.api.mvc.{PathBindable, QueryStringBindable}

    // import models directly for backwards compatibility with prior versions of the generator
    import Core._
    import Models._

    object Core {
      implicit def pathBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.DateTime] = ApibuilderPathBindable(ApibuilderTypes.dateTimeIso8601)
      implicit def queryStringBindableDateTimeIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.DateTime] = ApibuilderQueryStringBindable(ApibuilderTypes.dateTimeIso8601)

      implicit def pathBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): PathBindable[_root_.org.joda.time.LocalDate] = ApibuilderPathBindable(ApibuilderTypes.dateIso8601)
      implicit def queryStringBindableDateIso8601(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[_root_.org.joda.time.LocalDate] = ApibuilderQueryStringBindable(ApibuilderTypes.dateIso8601)
    }

    object Models {
      import io.gimbalabs.cardano.auth.v0.models._

      val signatureTypeConverter: ApibuilderTypeConverter[io.gimbalabs.cardano.auth.v0.models.SignatureType] = new ApibuilderTypeConverter[io.gimbalabs.cardano.auth.v0.models.SignatureType] {
        override def convert(value: String): io.gimbalabs.cardano.auth.v0.models.SignatureType = io.gimbalabs.cardano.auth.v0.models.SignatureType(value)
        override def convert(value: io.gimbalabs.cardano.auth.v0.models.SignatureType): String = value.toString
        override def example: io.gimbalabs.cardano.auth.v0.models.SignatureType = io.gimbalabs.cardano.auth.v0.models.SignatureType.Payment
        override def validValues: Seq[io.gimbalabs.cardano.auth.v0.models.SignatureType] = io.gimbalabs.cardano.auth.v0.models.SignatureType.all
      }
      implicit def pathBindableSignatureType(implicit stringBinder: QueryStringBindable[String]): PathBindable[io.gimbalabs.cardano.auth.v0.models.SignatureType] = ApibuilderPathBindable(signatureTypeConverter)
      implicit def queryStringBindableSignatureType(implicit stringBinder: QueryStringBindable[String]): QueryStringBindable[io.gimbalabs.cardano.auth.v0.models.SignatureType] = ApibuilderQueryStringBindable(signatureTypeConverter)
    }

    trait ApibuilderTypeConverter[T] {

      def convert(value: String): T

      def convert(value: T): String

      def example: T

      def validValues: Seq[T] = Nil

      def errorMessage(key: String, value: String, ex: java.lang.Exception): String = {
        val base = s"Invalid value '$value' for parameter '$key'. "
        validValues.toList match {
          case Nil => base + "Ex: " + convert(example)
          case values => base + ". Valid values are: " + values.mkString("'", "', '", "'")
        }
      }
    }

    object ApibuilderTypes {
      val dateTimeIso8601: ApibuilderTypeConverter[_root_.org.joda.time.DateTime] = new ApibuilderTypeConverter[_root_.org.joda.time.DateTime] {
        override def convert(value: String): _root_.org.joda.time.DateTime = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseDateTime(value)
        override def convert(value: _root_.org.joda.time.DateTime): String = _root_.org.joda.time.format.ISODateTimeFormat.dateTime.print(value)
        override def example: _root_.org.joda.time.DateTime = _root_.org.joda.time.DateTime.now
      }

      val dateIso8601: ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] = new ApibuilderTypeConverter[_root_.org.joda.time.LocalDate] {
        override def convert(value: String): _root_.org.joda.time.LocalDate = _root_.org.joda.time.format.ISODateTimeFormat.dateTimeParser.parseLocalDate(value)
        override def convert(value: _root_.org.joda.time.LocalDate): String = _root_.org.joda.time.format.ISODateTimeFormat.date.print(value)
        override def example: _root_.org.joda.time.LocalDate = _root_.org.joda.time.LocalDate.now
      }
    }

    final case class ApibuilderQueryStringBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends QueryStringBindable[T] {

      override def bind(key: String, params: Map[String, Seq[String]]): _root_.scala.Option[_root_.scala.Either[String, T]] = {
        params.getOrElse(key, Nil).headOption.map { v =>
          try {
            Right(
              converters.convert(v)
            )
          } catch {
            case ex: java.lang.Exception => Left(
              converters.errorMessage(key, v, ex)
            )
          }
        }
      }

      override def unbind(key: String, value: T): String = {
        s"$key=${converters.convert(value)}"
      }
    }

    final case class ApibuilderPathBindable[T](
      converters: ApibuilderTypeConverter[T]
    ) extends PathBindable[T] {

      override def bind(key: String, value: String): _root_.scala.Either[String, T] = {
        try {
          Right(
            converters.convert(value)
          )
        } catch {
          case ex: java.lang.Exception => Left(
            converters.errorMessage(key, value, ex)
          )
        }
      }

      override def unbind(key: String, value: T): String = {
        converters.convert(value)
      }
    }

  }

}
